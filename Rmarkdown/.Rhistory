desc <- descripts %>%
filter(Point == "Lower Colorado River Basin")
desc$Description
}
)
selecteditem
descripts <- read.csv("C:/Users/bcrary/Desktop/Projects/CRB/TestViz/Rmarkdown/descriptions.csv")
selecteduser <- "Bullhead City"
event.data <- "test"
selecteditem <- as.character(
if(is.null(event.data)==T) {
"Lower Colorado River Basin"
} else if(len(selecteduser)!=0) {
desc <- descripts %>%
filter(Point == selecteduser)
desc$Description
} else if(len(selectedres)!=0) {
desc <- descripts %>%
filter(Point == selectedres)
desc$Description
} else {
desc <- descripts %>%
filter(Point == "Lower Colorado River Basin")
desc$Description
}
)
selecteditem
selecteditem <- as.character(
if(is.null(event.data)==T) {
"Lower Colorado River Basin"
} else if(length(selecteduser)!=0) {
desc <- descripts %>%
filter(Point == selecteduser)
desc$Description
} else if(length(selectedres)!=0) {
desc <- descripts %>%
filter(Point == selectedres)
desc$Description
} else {
desc <- descripts %>%
filter(Point == "Lower Colorado River Basin")
desc$Description
}
)
selecteditem
library(tidyverse)
selecteditem <- as.character(
if(is.null(event.data)==T) {
"Lower Colorado River Basin"
} else if(length(selecteduser)!=0) {
desc <- descripts %>%
filter(Point == selecteduser)
desc$Description
} else if(length(selectedres)!=0) {
desc <- descripts %>%
filter(Point == selectedres)
desc$Description
} else {
desc <- descripts %>%
filter(Point == "Lower Colorado River Basin")
desc$Description
}
)
selecteditem
str(descripts)
descripts <- read_csv("C:/Users/bcrary/Desktop/Projects/CRB/TestViz/Rmarkdown/descriptions.csv")
str(descripts)
descripts$Point
desc <- subset(descripts, descripts$Point == selecteduser[1,1])
desc <- subset(descripts, descripts$Point == "Bard Unit")
desc
desc$Description
url <- "https://www.usbr.gov/lc/region/g4000/hourly/use.pdf"
### Load pages 1-5. Direct coercion into data frame creates no concerns with these tables
tab1_5 <- extract_tables(url,pages=c(1,2,3,4,5), method="data.frame")
### Load page 6.  No tab delimiter between user and source on page 6, coerced table does not populate correctly. conditionally populate source, "X", based on last nchar of user name
tab6 <- extract_tables(url, pages=6, method="data.frame")
tab6[[1]]$X <- ""
tab6[[1]]$X <- ifelse(substrRight(tab6[[1]]$WATER.USER, 9)=="Diversion","Diversion", tab6[[1]]$X)
tab6[[1]]$X <- ifelse(substrRight(tab6[[1]]$WATER.USER, 16)=="Measured Returns", "Measured Returns", tab6[[1]]$X)
tab6[[1]]$X <- ifelse(substrRight(tab6[[1]]$WATER.USER, 18)=="Unmeasured Returns", "Unmeasured Returns", tab6[[1]]$X)
tab6[[1]]$X <- ifelse(substrRight(tab6[[1]]$WATER.USER, 15)=="Consumptive Use", "Consumptive Use", tab6[[1]]$X)
### Load pages 7-8. Direct coercion into data frame creates no concerns with these tables
tab7_8 <- extract_tables(url, pages=c(7,8), method="data.frame")
### Load page 9. Coercion for this page is fine if isolated from other tables/pages using extract_tables function
tab9 <- extract_tables(url, pages=9, method="data.frame")
tab9 <- list(tab9[[1]]) ## removes extraneous second table on this page
### merge tables into single dataframe
tab <- rbindlist(c(tab1_5, tab6, tab7_8, tab9))
### Specific curating:
tab <- tab %>% filter(WATER.USER != "Unassigned Yuma Project Reservation Division Measured Returns") %>%
filter(WATER.USER != "Total Yuma Project Reservation Division Consumptive Use")
#####4. Do a little tidying
tab2 <- tab %>%
mutate(temp=lag(tab$X), temp2=lag(WATER.USER)) %>%
mutate(User=na.locf(ifelse(temp=="",temp2,NA), na.rm=FALSE)) %>%
filter(X!="") %>%
gather("month", "value", 3:14) %>%
mutate(parameter=X, year=2017) %>%
filter(parameter %in% c("Diversion", "Consumptive Use"))
keeplist <- c("Bard Unit",
"Bullhead City",
"Central Arizona Project",
"Chemehuevi Indian Reservation",
"Cibola Valley I.D.D.",
"City of Yuma",
"Coachella Valley Water District",
"Cocopah Indian Reservation",
"Colorado River Indian Reservation",
"Fort Mojave Indian Reservation",
"Imperial Irrigation District",
"Lake Havasu City",
"Metropolitan Water District of Southern California",
"Mohave Valley I.D.D.",
"North Gila Valley Irrigation District",
"Palo Verde Irrigation District",
"Robert B. Griffith Water Project",
"Unit B Irrigation and Drainage District",
"Wellton-Mohawk I.D.D.",
"Yuma County Water Users' Association",
"Yuma Irrigation District",
"Yuma Mesa I.D.D."
)
tab3 <- tab2 %>%
filter(User %in% keeplist) %>%
mutate(User= str_replace_all(User, c("Yuma County Water Users' Association"="Yuma County WUA", "Unit B Irrigation and Drainage District" = "Unit 'B' I.D.D.", "Chemehuevi Indian Tribe"="Chemehuevi Indian Reservation", "North Gila Valley Irrigation District" = "North Gila Valley I.D.D.", "Metropolitan Water District of Southern California" = "Met. Water District of So. Cal."))) %>%
mutate(value = as.numeric(gsub(",", "", value))) %>%
group_by(User, parameter, year, month) %>%
summarise(value=sum(value))
url <- "https://www.usbr.gov/lc/region/g4000/hourly/use.pdf"
### Load pages 1-5. Direct coercion into data frame creates no concerns with these tables
tab1_5 <- extract_tables(url,pages=c(1,2,3,4,5), method="data.frame")
rm(list=ls())
library(shiny)
monthStart <- function(x) {
x <- as.POSIXlt(x)
x$mday <- 1
as.Date(x)
}
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
library(shiny)
library(rmarkdown)
library(tidyverse)
library(ggplot2)
library(plotly)
library(leaflet)
library(rgdal)
library(rgeos)
library(sf)
library(raster)
library(rvest)
library(stringr)
library(lubridate)
library(gridExtra)
library(tabulizer)
library(data.table)
library(zoo)
url <- "https://www.usbr.gov/lc/region/g4000/hourly/use.pdf"
### Load pages 1-5. Direct coercion into data frame creates no concerns with these tables
tab1_5 <- extract_tables(url,pages=c(1,2,3,4,5), method="data.frame")
### Load page 6.  No tab delimiter between user and source on page 6, coerced table does not populate correctly. conditionally populate source, "X", based on last nchar of user name
tab6 <- extract_tables(url, pages=6, method="data.frame")
tab6[[1]]$X <- ""
tab6[[1]]$X <- ifelse(substrRight(tab6[[1]]$WATER.USER, 9)=="Diversion","Diversion", tab6[[1]]$X)
tab6[[1]]$X <- ifelse(substrRight(tab6[[1]]$WATER.USER, 16)=="Measured Returns", "Measured Returns", tab6[[1]]$X)
tab6[[1]]$X <- ifelse(substrRight(tab6[[1]]$WATER.USER, 18)=="Unmeasured Returns", "Unmeasured Returns", tab6[[1]]$X)
tab6[[1]]$X <- ifelse(substrRight(tab6[[1]]$WATER.USER, 15)=="Consumptive Use", "Consumptive Use", tab6[[1]]$X)
### Load pages 7-8. Direct coercion into data frame creates no concerns with these tables
tab7_8 <- extract_tables(url, pages=c(7,8), method="data.frame")
### Load page 9. Coercion for this page is fine if isolated from other tables/pages using extract_tables function
tab9 <- extract_tables(url, pages=9, method="data.frame")
tab9 <- list(tab9[[1]]) ## removes extraneous second table on this page
### merge tables into single dataframe
tab <- rbindlist(c(tab1_5, tab6, tab7_8, tab9))
### Specific curating:
tab <- tab %>% filter(WATER.USER != "Unassigned Yuma Project Reservation Division Measured Returns") %>%
filter(WATER.USER != "Total Yuma Project Reservation Division Consumptive Use")
#####4. Do a little tidying
tab2 <- tab %>%
mutate(temp=lag(tab$X), temp2=lag(WATER.USER)) %>%
mutate(User=na.locf(ifelse(temp=="",temp2,NA), na.rm=FALSE)) %>%
filter(X!="") %>%
gather("month", "value", 3:14) %>%
mutate(parameter=X, year=2017) %>%
filter(parameter %in% c("Diversion", "Consumptive Use"))
keeplist <- c("Bard Unit",
"Bullhead City",
"Central Arizona Project",
"Chemehuevi Indian Reservation",
"Cibola Valley I.D.D.",
"City of Yuma",
"Coachella Valley Water District",
"Cocopah Indian Reservation",
"Colorado River Indian Reservation",
"Fort Mojave Indian Reservation",
"Imperial Irrigation District",
"Lake Havasu City",
"Metropolitan Water District of Southern California",
"Mohave Valley I.D.D.",
"North Gila Valley Irrigation District",
"Palo Verde Irrigation District",
"Robert B. Griffith Water Project",
"Unit B Irrigation and Drainage District",
"Wellton-Mohawk I.D.D.",
"Yuma County Water Users' Association",
"Yuma Irrigation District",
"Yuma Mesa I.D.D."
)
tab3 <- tab2 %>%
filter(User %in% keeplist) %>%
mutate(User= str_replace_all(User, c("Yuma County Water Users' Association"="Yuma County WUA", "Unit B Irrigation and Drainage District" = "Unit 'B' I.D.D.", "Chemehuevi Indian Tribe"="Chemehuevi Indian Reservation", "North Gila Valley Irrigation District" = "North Gila Valley I.D.D.", "Metropolitan Water District of Southern California" = "Met. Water District of So. Cal."))) %>%
mutate(value = as.numeric(gsub(",", "", value))) %>%
group_by(User, parameter, year, month) %>%
summarise(value=sum(value))
View(tab3)
View(tab3)
ucache <- read_csv("C:/Users/bcrary/Desktop/Projects/CRB/TestViz/Rmarkdown/Users_2012-2016.csv")
ucache2 <-  ucache %>%
gather("month", "value", 4:15) %>%
filter(parameter %in% c("Diversion", "Consumptive Use")) %>%
group_by(User, parameter, year, month) %>%
summarise(value=sum(value))
m2 <- c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC")
uframe <- full_join(tab3, ucache2, by=c("User", "parameter", "year", "month", "value")) %>%
mutate(month=match(month, m2)) %>%
ungroup() %>%
mutate(User= str_replace_all(User, c("Metropolitan Water District of Southern California" = "Met. Water District of So. Cal.")))
View(ucache2)
View(ucache2)
View(uframe)
View(uframe)
userlist <- c("Bard Unit",
"Bullhead City",
"Central Arizona Project",
"Chemehuevi Indian Reservation",
"Cibola Valley I.D.D.",
"City of Yuma",
"Coachella Valley Water District",
"Cocopah Indian Reservation",
"Colorado River Indian Reservation",
"Fort Mojave Indian Reservation",
"Imperial Irrigation District",
"Lake Havasu City",
"Met. Water District of So. Cal.",
"Mohave Valley I.D.D.",
"North Gila Valley I.D.D.",
"Palo Verde Irrigation District",
"Robert B. Griffith Water Project",
"Unit 'B' I.D.D.",
"Wellton-Mohawk I.D.D.",
"Yuma County WUA",
"Yuma Irrigation District",
"Yuma Mesa I.D.D."
)
User <- rep(userlist,12*6*2)
year <- c(rep(2012,22*12*2), rep(2013, 22*12*2), rep(2014,22*12*2), rep(2015,22*12*2), rep(2016,22*12*2), rep(2017,22*12*2))
month <- rep(c(rep(1,22*2),rep(2,22*2), rep(3,22*2), rep(4,22*2), rep(5,22*2), rep(6,22*2), rep(7,22*2), rep(8,22*2), rep(9,22*2), rep(10,22*2), rep(11,22*2), rep(12,22*2)))
parameter <- rep(c(rep("Diversion",22), rep("Consumptive Use", 22)),12*6)
blank <- data.frame(User,month,year,parameter) %>%
mutate(User= str_replace_all(User, c("Metropolitan Water District of Southern California" = "Met. Water District of So. Cal.")))
View(blank)
View(blank)
uframe <- left_join(blank, uframe) %>%
group_by(User, parameter) %>%
mutate("NormValue" = value/max(value, na.rm=TRUE)) %>%
group_by(User, parameter) %>%
mutate("PlotValue" = ifelse(is.na(NormValue), mean(NormValue, na.rm=TRUE), NormValue), "alpha" = ifelse(is.na(NormValue), 0.1, 0.5)) %>%
mutate("UserNorm" = value/max(value, na.rm=TRUE)) %>%
mutate("UserNormValue" = ifelse(is.na(UserNorm), mean(UserNorm, na.rm=TRUE), UserNorm))
ucoords <- read_csv("C:/Users/bcrary/Desktop/Projects/CRB/TestViz/Rmarkdown/usercoords.csv")
uframe <- left_join(uframe, ucoords, by="User")
View(uframe)
View(uframe)
View(uframe)
View(uframe)
url <- "https://www.usbr.gov/lc/region/g4000/hourly/use.pdf"
### Load pages 1-5. Direct coercion into data frame creates no concerns with these tables
tab1_5 <- extract_tables(url,pages=c(1,2,3,4,5), method="data.frame")
### Loa
View(tab3)
View(tab3)
is.nan(4)
uframe <- full_join(tab3, ucache2, by=c("User", "parameter", "year", "month", "value")) %>%
mutate(month=match(month, m2)) %>%
ungroup() %>%
mutate(User= str_replace_all(User, c("Metropolitan Water District of Southern California" = "Met. Water District of So. Cal.")))
userlist <- c("Bard Unit",
"Bullhead City",
"Central Arizona Project",
"Chemehuevi Indian Reservation",
"Cibola Valley I.D.D.",
"City of Yuma",
"Coachella Valley Water District",
"Cocopah Indian Reservation",
"Colorado River Indian Reservation",
"Fort Mojave Indian Reservation",
"Imperial Irrigation District",
"Lake Havasu City",
"Met. Water District of So. Cal.",
"Mohave Valley I.D.D.",
"North Gila Valley I.D.D.",
"Palo Verde Irrigation District",
"Robert B. Griffith Water Project",
"Unit 'B' I.D.D.",
"Wellton-Mohawk I.D.D.",
"Yuma County WUA",
"Yuma Irrigation District",
"Yuma Mesa I.D.D."
)
User <- rep(userlist,12*6*2)
year <- c(rep(2012,22*12*2), rep(2013, 22*12*2), rep(2014,22*12*2), rep(2015,22*12*2), rep(2016,22*12*2), rep(2017,22*12*2))
month <- rep(c(rep(1,22*2),rep(2,22*2), rep(3,22*2), rep(4,22*2), rep(5,22*2), rep(6,22*2), rep(7,22*2), rep(8,22*2), rep(9,22*2), rep(10,22*2), rep(11,22*2), rep(12,22*2)))
parameter <- rep(c(rep("Diversion",22), rep("Consumptive Use", 22)),12*6)
blank <- data.frame(User,month,year,parameter) %>%
mutate(User= str_replace_all(User, c("Metropolitan Water District of Southern California" = "Met. Water District of So. Cal.")))
uframe <- left_join(blank, uframe) %>%
group_by(User, parameter) %>%
mutate("NormValue" = value/max(value, na.rm=TRUE)) %>%
group_by(User, parameter) %>%
mutate("PlotValue" = ifelse(is.na(NormValue), mean(NormValue, na.rm=TRUE), NormValue), "alpha" = ifelse(is.na(NormValue), 0.1, 0.5)) %>%
mutate("PlotValue" = ifelse(is.nan(PlotValue), 0.1, PlotValue), "alpha" = ifelse(is.nan(PlotValue), 0.1,0.5)) %>%
mutate("UserNorm" = value/max(value, na.rm=TRUE)) %>%
mutate("UserNormValue" = ifelse(is.na(UserNorm), mean(UserNorm, na.rm=TRUE), UserNorm))
install.packages("curl")
devtools::install_github('hadley/devtools')
install.packages("pkgload")
library(devtools)
library(devtools)
install.packages("devtools")
install.packages("devtools", dependencies = TRUE)
devtools::install_github('hadley/devtools')
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("r-lib/pkgload")
session_info()
library(rlang)
session_info()
devtools::install_github("tidyverse/rlang", build_vignettes = TRUE)
library(rlang)
session_info()
devtools::install_github('hadley/devtools')
fmt <- "Package '%s' is missing the GithubSHA1 field and needs to be reinstalled."
pkgDirs <- list.files(.libPaths(), full.names = TRUE)
descPaths <- file.path(pkgDirs, "DESCRIPTION")
pkgInfo <- lapply(descPaths, function(path) {
tryCatch({
pkg <- basename(dirname(path))
contents <- readChar(path, file.info(path)$size, TRUE)
Encoding(contents) <- "UTF-8"
if (grepl("GithubRepo", contents) && !grepl("GithubSHA1", contents)) {
cat(sprintf(fmt, pkg), sep = "\n")
return(pkg)
}
NULL
}, error = function(e) NULL)
})
needsReinstall <- as.character(Filter(Negate(is.null), pkgInfo))
if (length(needsReinstall) == 0) {
cat("All packages appear up to date -- no action necessary.\n")
} else {
cat("One or more packages need to be updated.\n")
}
install.packages("rlang")
install.packages("rlang", dependecies=TRUE
)
remove.packages("rlang")
install.packages("rlang", dependecies=TRUE
)
install.packages("rlang", dependencies=TRUE)
remove.packages("rlang")
library(devtools)
install.packages(devtools)
install.packages("devtools")
install.packages("devtools", dependencies=TRUE)
devtools::install_github('hadley/devtools')
fmt <- "Package '%s' is missing the GithubSHA1 field and needs to be reinstalled."
pkgDirs <- list.files(.libPaths(), full.names = TRUE)
descPaths <- file.path(pkgDirs, "DESCRIPTION")
pkgInfo <- lapply(descPaths, function(path) {
tryCatch({
pkg <- basename(dirname(path))
contents <- readChar(path, file.info(path)$size, TRUE)
Encoding(contents) <- "UTF-8"
if (grepl("GithubRepo", contents) && !grepl("GithubSHA1", contents)) {
cat(sprintf(fmt, pkg), sep = "\n")
return(pkg)
}
NULL
}, error = function(e) NULL)
})
needsReinstall <- as.character(Filter(Negate(is.null), pkgInfo))
if (length(needsReinstall) == 0) {
cat("All packages appear up to date -- no action necessary.\n")
} else {
cat("One or more packages need to be updated.\n")
}
fmt <- "Package '%s' is missing the GithubSHA1 field and needs to be reinstalled."
pkgDirs <- list.files(.libPaths(), full.names = TRUE)
descPaths <- file.path(pkgDirs, "DESCRIPTION")
pkgInfo <- lapply(descPaths, function(path) {
tryCatch({
pkg <- basename(dirname(path))
contents <- readChar(path, file.info(path)$size, TRUE)
Encoding(contents) <- "UTF-8"
if (grepl("GithubRepo", contents) && !grepl("GithubSHA1", contents)) {
cat(sprintf(fmt, pkg), sep = "\n")
return(pkg)
}
NULL
}, error = function(e) NULL)
})
needsReinstall <- as.character(Filter(Negate(is.null), pkgInfo))
if (length(needsReinstall) == 0) {
cat("All packages appear up to date -- no action necessary.\n")
} else {
cat("One or more packages need to be updated.\n")
}
remove.packages("XML")
install.package("XML")
install.packages("XML")
fmt <- "Package '%s' is missing the GithubSHA1 field and needs to be reinstalled."
pkgDirs <- list.files(.libPaths(), full.names = TRUE)
descPaths <- file.path(pkgDirs, "DESCRIPTION")
pkgInfo <- lapply(descPaths, function(path) {
tryCatch({
pkg <- basename(dirname(path))
contents <- readChar(path, file.info(path)$size, TRUE)
Encoding(contents) <- "UTF-8"
if (grepl("GithubRepo", contents) && !grepl("GithubSHA1", contents)) {
cat(sprintf(fmt, pkg), sep = "\n")
return(pkg)
}
NULL
}, error = function(e) NULL)
})
needsReinstall <- as.character(Filter(Negate(is.null), pkgInfo))
if (length(needsReinstall) == 0) {
cat("All packages appear up to date -- no action necessary.\n")
} else {
cat("One or more packages need to be updated.\n")
}
install.packages("evaluate")
install.packages("evaluate")
installr()
library(installr)
installr::updateR()
installr::updateR()
library(ggplot2)
install.packages("devtools")
devtools::install_github('hadley/devtools')
install_github("tidyverse/tidyverse")
library(devtools)
install_github("tidyverse/tidyverse")
install_github("tidyverse/tidyverse", dependencies=TRUE
)
install_github("hadley/tidyverse")
devtools::install_github("hadley/tidyverse")
install.packages("tidyverse", dependencies=TRUE)
install.packages("rmarkdown")
install.packages("shiny")
install.packages("plotly")
install.packages("leaflet")
install.packages("rgdal")
install.packages("rgeos")
install.packages("sf")
install.packages("tabulizer")
install_github("ropensci/tabulizer")
install_github("ropensci/tabulizerjars")
install.packages("rJava")
install_github("ropensci/tabulizerjars")
if(!require("ghit")){
install.packages("ghit")
}
# on 64-bit Windows
ghit::install_github(c("ropenscilabs/tabulizerjars", "ropenscilabs/tabulizer"), INSTALL_opts = "--no-multiarch")
# elsewhere
ghit::install_github(c("ropenscilabs/tabulizerjars", "ropenscilabs/tabulizer"))
install.packages("zoo")
install.packages("lubridate")
fmt <- "Package '%s' is missing the GithubSHA1 field and needs to be reinstalled."
pkgDirs <- list.files(.libPaths(), full.names = TRUE)
descPaths <- file.path(pkgDirs, "DESCRIPTION")
pkgInfo <- lapply(descPaths, function(path) {
tryCatch({
pkg <- basename(dirname(path))
contents <- readChar(path, file.info(path)$size, TRUE)
Encoding(contents) <- "UTF-8"
if (grepl("GithubRepo", contents) && !grepl("GithubSHA1", contents)) {
cat(sprintf(fmt, pkg), sep = "\n")
return(pkg)
}
NULL
}, error = function(e) NULL)
})
needsReinstall <- as.character(Filter(Negate(is.null), pkgInfo))
if (length(needsReinstall) == 0) {
cat("All packages appear up to date -- no action necessary.\n")
} else {
cat("One or more packages need to be updated.\n")
}
session_info()
rsconnect::deployApp()
library(rsconnect)
deployApp()
deployApp()
getwd()
setwd("C:/Users/bcrary/Desktop/Projects/CRB/TestViz/Rmarkdown")
deployApp()
